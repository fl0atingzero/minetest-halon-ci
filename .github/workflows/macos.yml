name: macos

on:
  workflow_dispatch:
  workflow_call:
    outputs:
      run_id:
        description: "Run ID of this reusable workflow call"
        value: ${{ jobs.meta.outputs.run_id }}

jobs:
  build-arm-macos-xcode:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Clone Minetest from Codeberg
        run: |
          git clone --depth 1 https://codeberg.org/halon/Minetest.git minetest

      - name: Get Minetest commit
        id: mtsha
        working-directory: minetest
        shell: bash
        run: echo "sha=$(git rev-parse --short=12 HEAD)" >> "$GITHUB_OUTPUT"             

      - name: Apply patch
        working-directory: minetest
        run: |
          git apply ../macos/patch.diff

      - name: Clone mcl_localplayer mod
        working-directory: minetest
        run: |
          git clone --depth 1 https://codeberg.org/halon/mcl_localplayer.git clientmods/mcl_localplayer
          echo "load_mod_mcl_localplayer = true" > clientmods/mods.conf            
  
      - name: Install deps
        working-directory: minetest
        run: |
          source ./util/ci/common.sh
          install_macos_deps
          # brew jsoncpp do not include libjsoncpp.a, and if installed header conflict caused build failure
          brew uninstall jsoncpp

      - name: Append clientmods copy to Xcode resources
        working-directory: minetest
        run: |
          cat >> util/xcode/install_resources.cmake <<'CMAKE_SNIPPET'
          execute_process(
          	COMMAND ${CMAKE_COMMAND} -E copy_directory
          	"$ENV{SOURCE_ROOT}/clientmods"
          	"${RESOURCES_DIR}/clientmods"
          )
          CMAKE_SNIPPET

      - name: Build and Archive with Xcode
        working-directory: minetest
        run: |
          mkdir build_xcode
          cd build_xcode
          cmake .. \
            -DCMAKE_FIND_FRAMEWORK=LAST \
            -DRUN_IN_PLACE=FALSE -DENABLE_GETTEXT=TRUE \
            -DUSE_SDL2_STATIC=TRUE \
            -DSDL2_INCLUDE_DIRS=/opt/homebrew/include/SDL2 \
            -DFREETYPE_LIBRARY=/opt/homebrew/lib/libfreetype.a \
            -DGETTEXT_INCLUDE_DIR=/opt/homebrew/include \
            -DGETTEXT_LIBRARY=/opt/homebrew/lib/libintl.a \
            -DLUA_LIBRARY=/opt/homebrew/lib/libluajit-5.1.a \
            -DOGG_LIBRARY=/opt/homebrew/lib/libogg.a \
            -DVORBIS_LIBRARY=/opt/homebrew/lib/libvorbis.a \
            -DVORBISFILE_LIBRARY=/opt/homebrew/lib/libvorbisfile.a \
            -DZSTD_LIBRARY=/opt/homebrew/lib/libzstd.a \
            -DGMP_LIBRARY=/opt/homebrew/lib/libgmp.a \
            -DENABLE_LEVELDB=OFF \
            -DENABLE_POSTGRESQL=OFF \
            -DENABLE_REDIS=OFF \
            -DJPEG_LIBRARY=/opt/homebrew/lib/libjpeg.a \
            -DPNG_LIBRARY=/opt/homebrew/lib/libpng.a \
            -DCMAKE_EXE_LINKER_FLAGS=-lbz2 \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_STYLE=Manual \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=- \
            -DCMAKE_XCODE_ATTRIBUTE_ENABLE_HARDENED_RUNTIME=YES \
            -DXCODE_CODE_SIGN_ENTITLEMENTS=../../macos/mod.entitlements \
            -GXcode
          xcodebuild -project luanti.xcodeproj -scheme luanti -configuration Release build

      - name: Pack DMG
        env:
          MT_SHA: ${{ steps.mtsha.outputs.sha }}
        run: |
          set -euo pipefail
          BASENAME="luanti-macos-arm64-nightly-${MT_SHA}"
          DMG_NAME="${BASENAME}.dmg"
          hdiutil create -ov \
            -volname "Luanti Nightly" \
            -srcfolder "build_xcode/build/Release/luanti.app" \
            -format UDZO \
            "$GITHUB_WORKSPACE/$DMG_NAME"
          {
            echo "DMG=$DMG_NAME"
            echo "BASENAME=$BASENAME"
          } >> "$GITHUB_OUTPUT"
        working-directory: minetest
        id: dmg

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.dmg.outputs.BASENAME }}
          path: ${{ github.workspace }}/${{ steps.dmg.outputs.DMG }}
          if-no-files-found: error

  build-intel-macos-xcode:
    runs-on: macos-15-intel
    steps:
      - uses: actions/checkout@v4
      - name: Clone Minetest from Codeberg
        run: |
          git clone --depth 1 https://codeberg.org/halon/Minetest.git minetest

      - name: Get Minetest commit
        id: mtsha
        working-directory: minetest
        shell: bash
        run: echo "sha=$(git rev-parse --short=12 HEAD)" >> "$GITHUB_OUTPUT"             

      - name: Apply patch
        working-directory: minetest
        run: |
          git apply ../macos/patch.diff

      - name: Clone mcl_localplayer mod
        working-directory: minetest
        run: |
          git clone --depth 1 https://codeberg.org/halon/mcl_localplayer.git clientmods/mcl_localplayer
          echo "load_mod_mcl_localplayer = true" > clientmods/mods.conf            
  
      - name: Install deps
        working-directory: minetest
        run: |
          source ./util/ci/common.sh
          install_macos_deps
          # brew jsoncpp do not include libjsoncpp.a, and if installed header conflict caused build failure
          brew uninstall jsoncpp

      - name: Append clientmods copy to Xcode resources
        working-directory: minetest
        run: |
          cat >> util/xcode/install_resources.cmake <<'CMAKE_SNIPPET'
          execute_process(
          	COMMAND ${CMAKE_COMMAND} -E copy_directory
          	"$ENV{SOURCE_ROOT}/clientmods"
          	"${RESOURCES_DIR}/clientmods"
          )
          CMAKE_SNIPPET

      - name: Build and Archive with Xcode
        working-directory: minetest
        run: |
          mkdir build_xcode
          cd build_xcode

          BREW_PREFIX="$(brew --prefix)"
          SDL2_PREFIX="$(brew --prefix sdl2)"
          FREETYPE_PREFIX="$(brew --prefix freetype)"
          GETTEXT_PREFIX="$(brew --prefix gettext)"
          LUAJIT_PREFIX="$(brew --prefix luajit)"
          OGG_PREFIX="$(brew --prefix libogg)"
          VORBIS_PREFIX="$(brew --prefix libvorbis)"
          ZSTD_PREFIX="$(brew --prefix zstd)"
          GMP_PREFIX="$(brew --prefix gmp)"
          JPEG_PREFIX="$(brew --prefix jpeg-turbo)"
          PNG_PREFIX="$(brew --prefix libpng)"

          cmake .. \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 \
            -DCMAKE_FIND_FRAMEWORK=LAST \
            -DCMAKE_PREFIX_PATH="$BREW_PREFIX" \
            -DRUN_IN_PLACE=FALSE -DENABLE_GETTEXT=TRUE \
            -DUSE_SDL2_STATIC=TRUE \
            -DSDL2_INCLUDE_DIRS="$SDL2_PREFIX/include/SDL2" \
            -DFREETYPE_LIBRARY="$FREETYPE_PREFIX/lib/libfreetype.a" \
            -DGETTEXT_INCLUDE_DIR="$GETTEXT_PREFIX/include" \
            -DGETTEXT_LIBRARY="$GETTEXT_PREFIX/lib/libintl.a" \
            -DLUA_LIBRARY="$LUAJIT_PREFIX/lib/libluajit-5.1.a" \
            -DOGG_LIBRARY="$OGG_PREFIX/lib/libogg.a" \
            -DVORBIS_LIBRARY="$VORBIS_PREFIX/lib/libvorbis.a" \
            -DVORBISFILE_LIBRARY="$VORBIS_PREFIX/lib/libvorbisfile.a" \
            -DZSTD_LIBRARY="$ZSTD_PREFIX/lib/libzstd.a" \
            -DZSTD_INCLUDE_DIR="$ZSTD_PREFIX/include" \
            -DGMP_LIBRARY="$GMP_PREFIX/lib/libgmp.a" \
            -DENABLE_LEVELDB=OFF \
            -DENABLE_POSTGRESQL=OFF \
            -DENABLE_REDIS=OFF \
            -DJPEG_INCLUDE_DIR="$JPEG_PREFIX/include" \
            -DJPEG_LIBRARY="$JPEG_PREFIX/lib/libjpeg.a" \
            -DPNG_LIBRARY="$PNG_PREFIX/lib/libpng.a" \
            -DCMAKE_EXE_LINKER_FLAGS=-lbz2 \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_STYLE=Manual \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=- \
            -DCMAKE_XCODE_ATTRIBUTE_ENABLE_HARDENED_RUNTIME=YES \
            -DXCODE_CODE_SIGN_ENTITLEMENTS=../../macos/mod.entitlements \
            -GXcode
          xcodebuild -project luanti.xcodeproj -scheme luanti -configuration Release build

      - name: Pack DMG
        env:
          MT_SHA: ${{ steps.mtsha.outputs.sha }}
        run: |
          set -euo pipefail
          BASENAME="luanti-macos-x86_64-nightly-${MT_SHA}"
          DMG_NAME="${BASENAME}.dmg"
          hdiutil create -ov \
            -volname "Luanti Nightly" \
            -srcfolder "build_xcode/build/Release/luanti.app" \
            -format UDZO \
            "$GITHUB_WORKSPACE/$DMG_NAME"
          echo "DMG=$DMG_NAME" >> "$GITHUB_OUTPUT"
          {
            echo "DMG=$DMG_NAME"
            echo "BASENAME=$BASENAME"
          } >> "$GITHUB_OUTPUT"          
        working-directory: minetest
        id: dmg

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.dmg.outputs.BASENAME }}
          path: ${{ github.workspace }}/${{ steps.dmg.outputs.DMG }}
          if-no-files-found: error

  meta:
    runs-on: ubuntu-22.04
    outputs:
      run_id: ${{ steps.ctx.outputs.run_id }}
    steps:
      - id: ctx
        run: echo "run_id=$GITHUB_RUN_ID" >> "$GITHUB_OUTPUT"          